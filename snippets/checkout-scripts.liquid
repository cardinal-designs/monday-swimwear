<style>
  button.disabled, button[disabled='true'] {
    opacity: .5;
  }

  .consent-wrapper {
    margin-top: 10px;
  }
  
  .consent-wrapper a {
    text-transform: capitalize;
    text-decoration: underline;
    font-size: inherit;
    font-family: inherit;
    color: inherit;
  }

  label[for='consent-checkbox'] {
    padding-left: 0.75em;
  }
</style>
<script type="application/javascript">

  const CheckoutScripts = () => {
    const selectors = {
      submitButton: 'continue_button',
      returnButton: 'step__footer__previous-link',
      stepSections: 'section--billing-address',
      firstStep: '[data-customer-information-form="true"]',
    }

    const checkForConsentNeeded  = () => {
      const stepSection = document.getElementsByClassName(selectors.stepSections);
      const firstStep = document.getElementsByTagName('form')[0].dataset.customerInformationForm;
      let checkbox = createCheckboxMarkup();
        stepSection[0].appendChild(checkbox);
        if(localStorage.getItem("consentStatus") ){
          document.getElementById('consent-checkbox').checked = true
        } else {
          document.getElementById('consent-checkbox').checked = false
        }

      checkContinueStatus();
    }

    const checkContinueStatus = () => {
      if( 
        (localStorage.getItem("consentStatus")) 
        || 
        ( localStorage.getItem("consentStatus"))  
        ) {
        enableSubmitButton();
      } else {
        disableSubmitButton();
      }
    }

    const disableSubmitButton = () => {
      let button = document.getElementById(selectors.submitButton);
      
      if (button) {
        button.setAttribute('disabled', true);
        button.classList.add('disabled');
      }
    }

    const enableSubmitButton = () => {
      let button = document.getElementById(selectors.submitButton);
      if(button) {
       button.removeAttribute('disabled');
       button.classList.remove('disabled');     
      }
    }

    const createCheckboxMarkup = () => {
      const consentWrapper = document.createElement('div');
      const consentCheckboxWrapper = document.createElement('div');
      const consentHeadline = document.createElement('h3');
      const checkboxDiv = document.createElement('div');
      const checkbox = document.createElement('input');
      const consentLabel = document.createElement('label');
      const termsOfService = document.createElement('a');
      const refundPolicy = document.createElement('a');
      const productConsent = document.createElement('a');
      const termsText = document.createTextNode('terms of service');
      const termsLink = document.querySelector('.policy-list__item [data-modal="policy-terms-of-service"]').getAttribute('href');
      const refundText = document.createTextNode('refund policy');
      const refundLink = document.querySelector('.policy-list__item [data-modal="policy-refund-policy"]').getAttribute('href');
      const labelText = document.createTextNode(`{{ settings.consent-pre-link}}`);

      // termsOfService.href = '{{ settings.consent-terms-link }}';
      termsOfService.setAttribute('aria-haspopup', 'dialog');
      termsOfService.setAttribute('data-modal', 'policy-terms-of-service');
      termsOfService.setAttribute('data-title-text', 'Terms of Service');
      termsOfService.setAttribute('data-close-text', 'Close');
      termsOfService.setAttribute('data-iframe', 'true');
      termsOfService.setAttribute('href', termsLink);
      termsOfService.appendChild(termsText);

      // refundPolicy.href = '{{ settings.consent-privacy-link }}'
      refundPolicy.setAttribute('aria-haspopup', 'dialog');
      refundPolicy.setAttribute('data-modal', 'policy-refund-policy');
      refundPolicy.setAttribute('data-title-text', 'Refund Policy');
      refundPolicy.setAttribute('data-close-text', 'Close');
      refundPolicy.setAttribute('data-iframe', 'true');
      refundPolicy.setAttribute('href', refundLink);
      refundPolicy.appendChild(refundText)

      consentCheckboxWrapper.classList.add('checkbox-wrapper');
      consentCheckboxWrapper.classList.add('consent');

      checkbox.setAttribute('id', 'consent-checkbox');
      checkbox.setAttribute('name', "consentRequired");
      checkbox.setAttribute('type', "checkbox");
      checkbox.setAttribute('value', "0");
      checkbox.classList.add('input-checkbox');

      consentLabel.htmlFor = 'consent-checkbox';
      consentLabel.classList.add('checkbox_label');
      consentLabel.appendChild(labelText);
      consentLabel.appendChild(document.createTextNode(' '));
      consentLabel.appendChild(termsOfService);
      consentLabel.appendChild(document.createTextNode(' and '));
      consentLabel.appendChild(refundPolicy);
      consentLabel.appendChild(document.createTextNode('.'));

      checkboxDiv.appendChild(checkbox);
      checkboxDiv.appendChild(consentLabel);

      consentCheckboxWrapper.appendChild(checkboxDiv);

      consentWrapper.classList.add('consent-wrapper')
      consentWrapper.appendChild(consentHeadline);
      consentWrapper.appendChild(consentCheckboxWrapper);

      return consentWrapper;
    }

    const onConsentChange = () => {
      let checkbox = document.getElementById('consent-checkbox');

      if (checkbox) {
        checkbox.addEventListener('change', function(event) {
          let isChecked = event.target.checked;
          if (isChecked) {
            localStorage.setItem("consentStatus", true)
          } else if (isChecked === false) {
            localStorage.removeItem("consentStatus")
          }

          checkContinueStatus();
        });
      }
    }

    return {
      checkForConsentNeeded: checkForConsentNeeded,
      onConsentChange: onConsentChange,
      checkContinueStatus: checkContinueStatus,
    }
  }

  if(!Shopify.Checkout.OrderStatus) {
    const stepSection = document.querySelector("[data-last-step='true'] .section--billing-address")
    stepSection.addEventListener("DOMContentLoaded", function(event) {
      Shopify = window.Shopify || {};
      Shopify.checkoutScripts = CheckoutScripts();
      let checkout = Shopify.checkoutScripts;
      checkout.checkForConsentNeeded();
      checkout.onConsentChange();
      checkout.checkContinueStatus();

      const observedEl = document.querySelector(".main__content");
      const observer = new MutationObserver(mutationRecords => {
        if(!document.querySelector(".consent-wrapper")){
          checkout.checkForConsentNeeded();
          checkout.onConsentChange();
        }
        checkout.checkContinueStatus();
      })

      observer.observe(observedEl, {subtree: true, childList: true});
    });
  } else if (Shopify.Checkout.OrderStatus) {
    document.addEventListener("DOMContentLoaded", function(event) {
      Shopify.checkoutScripts = CheckoutScripts();
      let checkout = Shopify.checkoutScripts;
    });
  }
</script>