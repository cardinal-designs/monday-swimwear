<link rel="stylesheet" href="{{ 'component-card.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-price.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'component-product-grid.css' | asset_url }}" media="print" onload="this.media='all'">
<link rel="stylesheet" href="{{ 'section-product-recommendations.css' | asset_url }}" media="print" onload="this.media='all'">

<noscript>{{ 'component-card.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-price.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'component-product-grid.css' | asset_url | stylesheet_tag }}</noscript>
<noscript>{{ 'section-product-recommendations.css' | asset_url | stylesheet_tag }}</noscript>

<product-recommendations class="product-recommendations page-width" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">
  {% if recommendations.performed and recommendations.products_count > 0 %}
    <h2 class="product-recommendations__heading sh4">
      Recommended
      <div class="glow"></div>
      {{ section.settings.heading | escape }}
    </h2>
    <ul class="product-recommendations__grid swiper list-unstyled" role="list">
      <div class="swiper-wrapper">
        {% for recommendation in recommendations.products %}
          <li class="product-recommendations__item swiper-slide">
            {% render 'product-card',
              product_card_product: recommendation
            %}
          </li>
        {% endfor %}
      </div>
      <div class="product-recommendations__scrollbar-wrapper">
        <div class="swiper-scrollbar product-recommendations__scrollbar hide-desktop"></div>
      </div>
    </ul>
  {% endif %}
</product-recommendations>

{% javascript %}

  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();

      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);

        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('product-recommendations');
            if (recommendations && recommendations.innerHTML.trim().length) {
              this.innerHTML = recommendations.innerHTML;
            }

            const recommendationsSlider = new Swiper('.product-recommendations__grid', {
              slidesPerView: 1,
              loop: false,
              spaceBetween: 10,
              watchOverflow: true,
              allowTouchMove: true,
              speed: 400,
              freeMode: true,
              mousewheel: {
                forceToAxis: true
              },
              scrollbar: {
                el: '.product-recommendations__scrollbar',
                draggable: true
              },
              breakpoints: {
                1: {
                  spaceBetween: 10,
                  slidesPerView: 1.5
                },
                601: {
                  spaceBetween: 10,
                  slidesPerView: 2
                },
                769: {
                  spaceBetween: 20,
                  slidesPerView: 2.5
                },
                1051: {
                  spaceBetween: 20,
                  slidesPerView: 3
                },
                1200: {
                  spaceBetween: 20,
                  slidesPerView: 4,
                  allowTouchMove: false,
                  freeMode: false
                }
              }
            });
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}

{% schema %}
{
  "name": "t:sections.product-recommendations.name",
  "tag": "section",
  "class": "spaced-section",
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.product-recommendations.settings.paragraph__1.content"
    },
    {
      "type": "text",
      "id": "heading",
      "default": "You may also like",
      "label": "t:sections.product-recommendations.settings.heading.label"
    }
  ]
}
{% endschema %}
